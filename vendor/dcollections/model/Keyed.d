/*********************************************************
   Copyright: (C) 2008-2010 by Steven Schveighoffer.
              All rights reserved

   License: Boost Software License version 1.0

   Permission is hereby granted, free of charge, to any person or organization
   obtaining a copy of the software and accompanying documentation covered by
   this license (the "Software") to use, reproduce, display, distribute,
   execute, and transmit the Software, and to prepare derivative works of the
   Software, and to permit third-parties to whom the Software is furnished to
   do so, all subject to the following:

   The copyright notices in the Software and this entire statement, including
   the above license grant, this restriction and the following disclaimer, must
   be included in all copies of the Software, in whole or in part, and all
   derivative works of the Software, unless such copies or derivative works are
   solely in the form of machine-executable object code generated by a source
   language processor.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
   SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
   FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.

**********************************************************/
module dcollections.model.Keyed;

public import dcollections.model.Iterator;

/**
 * Interface defining an object that accesses values by key.
 * All operations on the object are O(lgN) or better.
 */
interface Keyed(K, V) : KeyedIterator!(K, V), KeyPurgeable!(K, V)
{
    /**
     * access a value based on the key
     */
    V opIndex(K key);

    /**
     * assign a value based on the key
     *
     * Use this to set/insert a key/value pair into the collection.
     *
     * Note that some containers do not allow adding key/value pairs in this
     * manner.
     *
     * For those containers, the key must already exist.  If the key does not
     * already exist, a range exception is thrown.
     */
    V opIndexAssign(V value, K key);

    /**
     * set the key/value pair.  This is similar to opIndexAssign, but returns
     * 'this', so the function can be chained.
     */
    Keyed set(K key, V value);

    /**
     * returns true if the collection contains the key
     */
    bool containsKey(K key);
}
